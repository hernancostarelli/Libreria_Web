package com.example.Library.model.enums;

import java.text.MessageFormat;

public enum EExceptionMessage {

    ////////////////////////////////////////////////////////////////////////////////////////////
    // GENERAL EXCEPTION MESSAGE
    ////////////////////////////////////////////////////////////////////////////////////////////

    ID_NOT_FOUND("ID NO ENCONTRADO"),
    ID_ALREADY_EXISTS("EL ID YA EXISTE"),
    PARAM_NOT_FOUND("PARÁMETRO NO ENCONTRADO"),
    //EMAIL_ALREADY_EXISTS("EL EMAIL {0} YA EXISTE"),
    INCORRECT_USERNAME_OR_PASSWORD("USUARIO O CONTRASEÑA INCORRECTA"),

    ////////////////////////////////////////////////////////////////////////////////////////////
    // ADMIN EXCEPTION MESSAGE
    ////////////////////////////////////////////////////////////////////////////////////////////

    THE_ADMIN_NAME_CANNOT_BE_EMPTY_OR_BE_NULL("EL NOMBRE DEL ADMIN NO PUEDE ESTAR VACÍO O SER NULO"),
    THE_ADMIN_SURNAME_CANNOT_BE_EMPTY_OR_BE_NULL("EL APELLIDO DEL ADMIN NO PUEDE ESTAR VACÍO O SER NULO"),
    THE_ADMIN_EMAIL_CANNOT_BE_EMPTY_OR_BE_NULL("EL EMAIL DEL ADMIN NO PUEDE ESTAR VACÍO O SER NULO"),
    THE_ADMIN_PASSWORD_CANNOT_BE_EMPTY_OR_BE_NULL("LA CONTRASEÑA DEL ADMIN NO PUEDE ESTAR VACÍO O SER NULO"),
    THE_ADMIN_PASSWORD_CANNOT_BE_SHORTER_THAN_6_CHARACTERS("LA CONTRASEÑA DEL ADMIN NO PUEDE SER MENOR A 6 CARACTERES"),
    THE_ENTERED_PASSWORDS_DO_NOT_MATCH("LAS CONTRASEÑAS INGRESADAS NO COINCIDEN"),
    THE_USER_HAS_SUCCESSFULLY_REGISTERED("EL USUARIO SE REGISTRO EXITOSAMENTE"),
    EMAIL_ALREADY_EXISTS("EL EMAIL YA EXISTE"),

    ////////////////////////////////////////////////////////////////////////////////////////////
    // AUTHOR EXCEPTION MESSAGE
    ////////////////////////////////////////////////////////////////////////////////////////////

    THE_AUTHOR_NAME_CANNOT_BE_EMPTY_OR_BE_NULL("EL NOMBRE DEL AUTOR NO PUEDE ESTAR VACÍO O SER NULO"),
    THE_AUTHOR_SURNAME_CANNOT_BE_EMPTY_OR_BE_NULL("EL APELLIDO DEL AUTOR NO PUEDE ESTAR VACÍO O SER NULO"),
    AUTHOR_NOT_FOUND("AUTOR NO ENCONTRADO"),
    ERROR_WHEN_DISPLAYING_A_LIST_OF_ALL_AUTHORS("ERROR AL MOSTAR UNA LISTA DE TODOS LOS AUTORES"),
    ERROR_WHEN_DISPLAYING_ACTIVE_AUTHORS("ERROR AL MOSTAR UNA LISTA DE AUTORES ACTIVOS"),
    ERROR_WHEN_DISPLAYING_INACTIVE_AUTHORS("ERROR AL MOSTAR UNA LISTA DE AUTORES INACTIVOS"),











    THERE_IS_NO_TEACHER_BY_THAT_NAME("NO EXISTE UN PROFESOR CON ESE NOMBRE"),
    THE_COURSE_ALREADY_HAS_A_TEACHER("EL CURSO YA TIENE UN PROFESOR A CARGO"),

    ////////////////////////////////////////////////////////////////////////////////////////////
    // STUDENT EXCEPTION MESSAGE
    ////////////////////////////////////////////////////////////////////////////////////////////

    THE_STUDENT_NAME_CANNOT_BE_EMPTY_OR_BE_NULL("EL NOMBRE DEL ALUMNO NO PUEDE ESTAR VACÍO O SER NULO"),
    THE_STUDENT_SURNAME_CANNOT_BE_EMPTY_OR_BE_NULL("EL APELLIDO DEL ALUMNO NO PUEDE ESTAR VACÍO O SER NULO"),
    THE_STUDENT_DATE_OF_BIRTH_CANNOT_BE_EMPTY_OR_BE_NULL("LA FECHA DE NACIMIENTO DEL ALUMNO NO PUEDE ESTAR VACÍO O SER NULO"),
    STUDENT_NOT_FOUND("ALUMNO NO ENCONTRADO"),
    ERROR_WHEN_DISPLAYING_A_LIST_OF_ALL_STUDENTS("ERROR AL MOSTAR UNA LISTA DE TODOS LOS ALUMNOS"),
    ERROR_WHEN_DISPLAYING_ACTIVE_STUDENTS("ERROR AL MOSTAR UNA LISTA DE ALUMNOS ACTIVOS"),
    ERROR_WHEN_DISPLAYING_INACTIVE_STUDENTS("ERROR AL MOSTAR UNA LISTA DE ALUMNOS INACTIVOS"),
    THERE_IS_NO_STUDENT_BY_THAT_NAME("NO EXISTE UN ALUMNO CON ESE NOMBRE"),
    THE_STUDENT_ALREADY_ATTENDS_THIS_COURSE("EL ALUMNO YA ASISTE A ESE CURSO"),

    ////////////////////////////////////////////////////////////////////////////////////////////
    // COURSE EXCEPTION MESSAGE
    ////////////////////////////////////////////////////////////////////////////////////////////
    COURSE_NOT_FOUND("CURSO NO ENCONTRADO"),
    THE_COURSE_NAME_CANNOT_BE_EMPTY_OR_BE_NULL("EL NOMBRE DEL CURSO NO PUEDE ESTAR VACÍO O SER NULO"),
    THE_COURSE_TURN_CANNOT_BE_EMPTY_OR_NULL("EL TURNO DEL CURSO NO PUEDE ESTAR VACÍO O SER NULO"),
    THE_COURSE_TIMETABLE_CANNOT_BE_EMPTY_OR_NULL("EL HORARIO DEL CURSO NO PUEDE ESTAR VACÍO O SER NULO"),
    ERROR_WHEN_DISPLAYING_A_LIST_OF_ALL_COURSES("ERROR AL MOSTAR UNA LISTA DE TODOS LOS CURSOS"),
    ERROR_WHEN_DISPLAYING_ACTIVE_COURSES("ERROR AL MOSTAR UNA LISTA DE CURSOS ACTIVOS"),
    ERROR_WHEN_DISPLAYING_INACTIVE_COURSES("ERROR AL MOSTAR UNA LISTA DE CURSOS INACTIVOS"),
    THERE_IS_NO_COURSE_BY_THAT_NAME("NO EXISTE UN CURSO CON ESE NOMBRE"),

    ERROR_WHEN_DISPLAYING_THE_LIST_OF_AVAILABLE_MONTHLY_FEES("ERROR WHEN DISPLAYING THE LIST OF AVAILABLE MONTHLY FEES"),
    ERROR_WHEN_DISPLAYING_THE_LIST_OF_AVAILABLE_DAILY_FEES("ERROR WHEN DISPLAYING THE LIST OF AVAILABLE DAILY FEES"),
    DAILY_FEE_NOT_FOUND("DAILY FEE NOT FOUND"),
    THE_MONTHLY_FEE_LIST_COULD_NOT_BE_REMOVED("THE MONTHLY FEE LIST COULD NOT BE REMOVED"),
    THE_MONTHLY_FEE_LIST_COULD_NOT_BE_RESTARTED("THE MONTHLY FEE LIST COULD NOT BE RESTARTED"),
    THE_DAILY_FEE_LIST_COULD_NOT_BE_REMOVED("THE DAILY FEE LIST COULD NOT BE REMOVED"),
    THE_DAILY_FEE_LIST_COULD_NOT_BE_RESTARTED("THE DAILY FEE LIST COULD NOT BE RESTARTED");

    private final String messageString;

    EExceptionMessage(String messageString) {
        this.messageString = messageString;
    }

    public String getMessage() {
        return messageString;
    }

    public String getMessage(String stringObject) {
        return MessageFormat.format(messageString, stringObject);
    }

    @Override
    public String toString() {
        return messageString;
    }

    public static EExceptionMessage typeOrValue(String value) {
        for (EExceptionMessage type : EExceptionMessage.class.getEnumConstants()) {
            if (type.toString().equals(value)) {
                return type;
            }
        }
        throw new IllegalArgumentException("ENUM MESSAGE NOT FOUND");
    }
}